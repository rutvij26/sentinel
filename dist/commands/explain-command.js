"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExplainCommand = void 0;
class ExplainCommand {
    name = 'explain';
    description = 'Explain changes in a specific file';
    usage = '/explain <filename>';
    async execute(context) {
        try {
            const args = this.parseArgs(context.commentBody);
            if (!args.filename) {
                await this.postUsageHelp(context);
                return;
            }
            // Post a status comment
            await context.octokit.rest.issues.createComment({
                owner: context.owner,
                repo: context.repository,
                issue_number: context.prNumber,
                body: `üîç **Explanation requested**\n\nSentinel AI is analyzing changes in \`${args.filename}\`...`,
            });
            // Generate and post explanation
            const explanation = await context.sentinel.explainFile(context.prNumber, args.filename);
            await context.octokit.rest.issues.createComment({
                owner: context.owner,
                repo: context.repository,
                issue_number: context.prNumber,
                body: `## üìÅ File Explanation: \`${args.filename}\`\n\n${explanation}\n\n---\n*Generated by Sentinel AI*`,
            });
        }
        catch (error) {
            throw new Error(`Failed to execute explain command: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
    parseArgs(commentBody) {
        const lines = commentBody.split('\n');
        for (const line of lines) {
            const trimmed = line.trim();
            if (trimmed.startsWith('/explain')) {
                const parts = trimmed.split(/\s+/);
                if (parts.length >= 2) {
                    return { filename: parts[1] };
                }
            }
        }
        return { filename: null };
    }
    async postUsageHelp(context) {
        await context.octokit.rest.issues.createComment({
            owner: context.owner,
            repo: context.repository,
            issue_number: context.prNumber,
            body: `‚ùì **Usage Help**\n\nPlease specify a filename:\n\`\`\`\n/explain <filename>\n\`\`\`\n\nExample: \`/explain src/main.ts\``,
        });
    }
}
exports.ExplainCommand = ExplainCommand;
//# sourceMappingURL=explain-command.js.map