"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LintCommand = void 0;
class LintCommand {
    name = 'lint';
    description = 'Run a lint review using the AI model';
    usage = '/lint';
    async execute(context) {
        try {
            // Post a status comment
            await context.octokit.rest.issues.createComment({
                owner: context.owner,
                repo: context.repository,
                issue_number: context.prNumber,
                body: '🔍 **Lint review requested**\n\nSentinel AI is analyzing code quality and identifying potential issues...',
            });
            // Generate and post lint review
            const lintIssues = await context.sentinel.lintCode(context.prNumber);
            if (lintIssues.length === 0) {
                await context.octokit.rest.issues.createComment({
                    owner: context.owner,
                    repo: context.repository,
                    issue_number: context.prNumber,
                    body: '✅ **Lint Review Complete**\n\nNo code quality issues were found. Great job! 🎉\n\n---\n*Generated by Sentinel AI*',
                });
            }
            else {
                const lintBody = this.buildLintComment(lintIssues);
                await context.octokit.rest.issues.createComment({
                    owner: context.owner,
                    repo: context.repository,
                    issue_number: context.prNumber,
                    body: lintBody,
                });
            }
        }
        catch (error) {
            throw new Error(`Failed to execute lint command: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
    buildLintComment(lintIssues) {
        let body = '## 🔍 Code Quality Analysis\n\n';
        const issuesBySeverity = {
            error: lintIssues.filter((i) => i.severity === 'error'),
            warning: lintIssues.filter((i) => i.severity === 'warning'),
            info: lintIssues.filter((i) => i.severity === 'info'),
        };
        if (issuesBySeverity.error.length > 0) {
            body += '### ❌ Critical Issues\n';
            issuesBySeverity.error.forEach((issue) => {
                body += `- **${issue.file}:${issue.line}** - ${issue.message}`;
                if (issue.rule)
                    body += ` (${issue.rule})`;
                body += '\n';
            });
            body += '\n';
        }
        if (issuesBySeverity.warning.length > 0) {
            body += '### ⚠️ Warnings\n';
            issuesBySeverity.warning.forEach((issue) => {
                body += `- **${issue.file}:${issue.line}** - ${issue.message}`;
                if (issue.rule)
                    body += ` (${issue.rule})`;
                body += '\n';
            });
            body += '\n';
        }
        if (issuesBySeverity.info.length > 0) {
            body += '### ℹ️ Suggestions\n';
            issuesBySeverity.info.forEach((issue) => {
                body += `- **${issue.file}:${issue.line}** - ${issue.message}`;
                if (issue.rule)
                    body += ` (${issue.rule})`;
                body += '\n';
            });
            body += '\n';
        }
        body += '---\n';
        body += '*Generated by Sentinel AI. Address these issues to improve code quality.*';
        return body;
    }
}
exports.LintCommand = LintCommand;
//# sourceMappingURL=lint-command.js.map